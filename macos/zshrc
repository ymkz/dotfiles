source /usr/local/opt/zplug/init.zsh

zplug "zsh-users/zsh-completions", defer:0
zplug "zsh-users/zsh-autosuggestions", defer:0
zplug "zsh-users/zsh-history-substring-search", defer:1
zplug "zdharma/fast-syntax-highlighting", defer:1

if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
    echo; zplug install
  fi
fi

zplug load

if builtin command -v brew > /dev/null; then
  FPATH=/usr/local/share/zsh/site-functions:$FPATH
fi

if builtin command -v starship > /dev/null; then
  eval "$(starship init zsh)"
fi

autoload -Uz compinit; compinit
autoload -Uz colors; colors

zstyle ':completion::complete:*' use-cache true
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' list-colors "${LS_COLORS}"

setopt no_beep
setopt auto_cd
setopt auto_pushd
setopt auto_menu
setopt list_packed
setopt list_types
setopt pushd_ignore_dups

setopt correct
setopt magic_equal_subst
setopt complete_aliases
setopt extended_glob
setopt nonomatch

setopt extended_history
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_reduce_blanks

unsetopt caseglob
unsetopt promptcr

function fzf-put-history() {
  BUFFER=$(history -n -r 1 | fzf +s +m --query="$LBUFFER" --prompt="history > ")
  CURSOR=$#BUFFER
  zle reset-prompt
}
zle -N fzf-put-history
bindkey '^h' fzf-put-history

function fzf-cd-ghq-repository() {
  local repository=$(ghq list | fzf +m --query="$LBUFFER" --prompt="repository > ")
  if [ -n "$repository" ]; then
    BUFFER="cd $(ghq root)/${repository}"
    zle accept-line
  fi
  zle reset-prompt
}
zle -N fzf-cd-ghq-repository
bindkey '^g' fzf-cd-ghq-repository

function fzf-switch-git-branch() {
  local branch=$(git branch --all | grep -v HEAD | fzf +m --prompt="branch > ")
  if [ -n "$branch" ]; then
    git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
  fi
  zle accept-line
}
zle -N fzf-switch-git-branch
bindkey '^b' fzf-switch-git-branch

alias cd-="cd -"
alias cdc="cd ~/workspace/cic"

if builtin command -v exa > /dev/null; then
  alias l="exa -F"
  alias ls="exa -F"
  alias la="exa -Fa"
  alias lt="exa -T"
  alias ll="exa -bhlHF"
  alias lla="exa -bhlHFa"
  alias llg="exa -bhlHFa --sort=type"
else
  alias l="ls -F --color=auto"
  alias ls="ls -F --color=auto"
  alias la="ls -A"
  alias ll="ls -l"
  alias lla="ls -AlF"
fi

if builtin command -v code > /dev/null; then
  alias code.="code ."
  alias coder="code . --reuse-window"
  alias codelist="code --list-extensions | xargs -L 1 echo code --install-extension"
fi

if builtin command -v git > /dev/null; then
  alias gf="git fetch"
  alias gfp="git fetch --prune"
  alias gs="git status --short --branch"
  alias gl="git log --date=short --pretty=format:'%C(yellow)%h %Cgreen%cd %Cblue%cn %Creset%s'"
  alias gb="git branch"
  alias gbl="git branch -a -vv"
  alias ga="git add"
  alias gd="git diff"
  alias gdc="git diff --cached"
  alias gnew="git switch --create"
  alias grs="git restore"
  alias grb="git rebase"
  alias gun="git reset HEAD"
  alias gcm="git commit --message"
  alias gcmini="git commit --allow-empty -m 'chore(git): initialize'"
  alias gam="git commit --amend -C HEAD"
  alias grecm="git commit --amend -m"
fi

if [ -d "/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app" ]; then
  alias simulator="open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app"
fi

if [ -d "/Applications/Yoink.app" ]; then
  alias yoink="open -a Yoink"
fi
